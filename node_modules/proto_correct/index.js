var mongo = require('mongodb')
    ,BSON = mongo.BSONPure
    ,Entities = require('html-entities').XmlEntities
    ,entities = new Entities();

// Correct Arrays

Array.prototype.sortRand = function() {
    this.sort(function() {
        return (Math.round(Math.random())-0.5); 
    })    
}

Array.prototype.runEach = function(callback) {
    var ar = this
        ,i = 0
        
    var goto = function(x) {
        i += x-1    
    }
        
    var func = function() {
        if(i >= ar.length || !ar[i]) {
            if(!!callback) callback.apply(null, arguments)
            return;
        }        
        var args = []
        for(var j=0;j<arguments.length;j++) args.push(arguments[j])
        
        args.push(func)
        args.push(goto)
    
        ar[i++].apply(null, args)
        
    }    
    func()  
}

Array.prototype.each = function(func, return_value) {
    if(return_value) {
        for(var i=0;i<this.length;i++) {
            this[i] = func(this[i], i)
        }
    } else {
        for(var i=0;i<this.length;i++) {
            func(this[i], i)
        }
    }
}


String.prototype._id = function() {
    if(/^[a-z0-9]{24}$/.test(this)) {
        return new BSON.ObjectID(this)
    }
    return false;    
}

String.prototype.hash = function(alg) {
    if(!alg) alg = 'sha1'
    return crypto.createHash(alg).update(String(this)).digest('hex')    
}

Function.prototype.about = function(obj) {
    this.aboutObject = obj
    return this
}

String.prototype.entities = function() {    
    return entities.decode(this);    
}

String.prototype.short = function(l) {
    var s = this;
    if(!s || !s.substr) return '';
 
    s = s.substr(0, l);
    while(l<this.length && !/[\.\!\,\;\s\?\:]/.test(this.charAt(l))) s += this.charAt(l++)
    if(s.length<this.length) s += '...'
    return s;
}