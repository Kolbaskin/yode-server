var HASH_ALG = 'sha1'
    ,crypto = require('crypto')
    ,mongo = require('mongodb')
    ,BSON = mongo.BSONPure
    ,util = require('util')
    

exports.check = function(folders, data, errReport) {
    if(!errReport) errReport = []
    var re, res = {}
    for(var i in folders) if(data[i] !== null) {
        if(folders[i] == 'captcha') {
            if(data[i] !== '') {
                errReport.push(i)                
            }
        } else
        if(folders[i][0] == 'password') {
            if(data[i] !== '') res[i] = crypto.createHash(HASH_ALG).update(data[i]).digest('hex')
            else
            if(folders[i][1]) {  
                errReport.push(i)
            }
        } else
        if(folders[i][0] == 'int') {
            if(data[i] !== '') {
                res[i] = parseInt(data[i])
                if(isNaN(res[i])) res[i] = null
            } 
            if(folders[i][1] && !res[i]) {       
                errReport.push(i)
            }
        }else
        if(folders[i][0] == 'float') {
            if(data[i] !== '') {
                res[i] = parseFloat(data[i])
                if(isNaN(res[i])) res[i] = null
            } 
            if(folders[i][1] && !res[i]) {  
                errReport.push(i)
            }
        } 
        else
        if(folders[i][0] == 'email') {
            if(data[i] !== '') {
                if(this.emailRegexp().test(data[i])) res[i] = data[i]
            } 
            if(folders[i][1] && !res[i]) {   
                errReport.push(i)
            }
        } 
        else {
            re = new RegExp(folders[i][0], 'i')
            
            if(util.isArray(data[i])) {
                res[i] = []
                for(var j=0;j<data[i].length;j++) {
                    if(
                        ((folders[i][1] || (!folders[i][1] && data[i][j] !== '')) &&  re.test(data[i][j]))
                        || (!folders[i][1] && data[i][j] === '')
                    ) {
                        res[i].push(data[i][j])    
                    } else {
                        errReport.push(i)
                    }
                }
            } else {
                if(
                    ((folders[i][1] || (!folders[i][1] && data[i] !== '')) &&  re.test(data[i]))
                    || (!folders[i][1] && data[i] === '')
                ) {
                    res[i] = data[i]    
                } else {
                    errReport.push(i)
                }
            }
        }
    }
    
    if(errReport.length>0) return false;
    
    return res;
}

exports.strToId = function(x, callback) {
    if(/^[a-z0-9]{24}$/.test(x)) {
        return new BSON.ObjectID(x)
    } else {
        if(!!callback) callback(null, {code:500})
        return 0;
    }
}

exports.emailRegexp = function() {
    return /^[a-z0-9\._-]+@[a-z0-9][a-z0-9_-]*(\.[a-z0-9_-]+)*\.([a-z]{2}|aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel)$/i    
}

exports.phoneNumber = function(phones) {
    
    if(!util.isArray(phones)) {
        phones = phones.replace(/,/g,';').split(';')
        if(phones.length == 1)
            phones = phones[0]
    }
    
    var fn = function(s) {
        s = s + ''
        var t = '', j=0, n = 0;
        if(s.charAt(0) == '8') n = 1;
        else if(s.substr(0,2) == '+7') n = 2;
        for(var i=n;i<s.length;i++) {
            if(j == 0) t += '('
            else if(j == 3) t += ')'
            else if(j == 6 || j==8) t += '-'
            if(/[0-9]/.test(s.charAt(i))) {
                j++;
                t += s.charAt(i)
            }
        }
        return t;
    }
    if(util.isArray(phones)) {
        for(var i=0;i<phones.length;i++) {
            phones[i] = fn(phones[i])    
        }
        return phones
    } else {
        return fn(phones)    
    }
}